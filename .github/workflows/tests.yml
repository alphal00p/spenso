name: Tests

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build dependencies first - this creates the base cache for all other jobs
  build-deps:
    environment: symbolica_keys
    runs-on: ubuntu-latest
    env:
      SYMBOLICA_LICENSE: ${{ secrets.SYMBOLICA_LICENSE }}
    outputs:
      deps-built: ${{ steps.build-deps.outputs.deps-built }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: lcnbr
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v7
      - name: Build dependencies
        id: build-deps
        run: |
          # Build just the dependencies to populate the cache
          nix build .#workspace --impure --no-link
          echo "deps-built=true" >> $GITHUB_OUTPUT

  # Run clippy and nextest checks per-crate with feature matrix
  tests:
    environment: symbolica_keys
    runs-on: ubuntu-latest
    needs: build-deps
    env:
      SYMBOLICA_LICENSE: ${{ secrets.SYMBOLICA_LICENSE }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Workspace-level checks
          - check: workspace-clippy
            crate: workspace
            features: default
            type: clippy
          - check: workspace-nextest
            crate: workspace
            features: default
            type: nextest
          # Per-crate default checks
          - check: spenso-clippy
            crate: spenso
            features: default
            type: clippy
          - check: spenso-nextest
            crate: spenso
            features: default
            type: nextest
          - check: spenso-macros-clippy
            crate: spenso-macros
            features: default
            type: clippy
          - check: spenso-macros-nextest
            crate: spenso-macros
            features: default
            type: nextest
          - check: spenso-hep-lib-clippy
            crate: spenso-hep-lib
            features: default
            type: clippy
          - check: spenso-hep-lib-nextest
            crate: spenso-hep-lib
            features: default
            type: nextest
          - check: idenso-clippy
            crate: idenso
            features: default
            type: clippy
          - check: idenso-nextest
            crate: idenso
            features: default
            type: nextest
          # Per-crate feature checks
          - check: spenso-clippy-shadowing
            crate: spenso
            features: shadowing
            type: clippy
          - check: spenso-nextest-shadowing
            crate: spenso
            features: shadowing
            type: nextest
          - check: idenso-clippy-bincode
            crate: idenso
            features: bincode
            type: clippy
          - check: idenso-nextest-bincode
            crate: idenso
            features: bincode
            type: nextest
          # Per-crate all-features checks
          - check: spenso-clippy-all-features
            crate: spenso
            features: all-features
            type: clippy
          - check: spenso-nextest-all-features
            crate: spenso
            features: all-features
            type: nextest
          - check: spenso-macros-clippy-all-features
            crate: spenso-macros
            features: all-features
            type: clippy
          - check: spenso-macros-nextest-all-features
            crate: spenso-macros
            features: all-features
            type: nextest
          - check: spenso-hep-lib-clippy-all-features
            crate: spenso-hep-lib
            features: all-features
            type: clippy
          - check: spenso-hep-lib-nextest-all-features
            crate: spenso-hep-lib
            features: all-features
            type: nextest
          - check: idenso-clippy-all-features
            crate: idenso
            features: all-features
            type: clippy
          - check: idenso-nextest-all-features
            crate: idenso
            features: all-features
            type: nextest
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: lcnbr
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v7
      - name: Run ${{ matrix.type }} for ${{ matrix.crate }} (${{ matrix.features }})
        run: nix build .#checks.x86_64-linux.${{ matrix.check }} --impure --no-link --print-build-logs
